//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/Input actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace LittleKingdom.Input
{
    public partial class @Inputs : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Inputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input actions"",
    ""maps"": [
        {
            ""name"": ""Standard"",
            ""id"": ""e682245c-be4c-4b78-954d-72c3c0c233ee"",
            ""actions"": [
                {
                    ""name"": ""Pointer Position"",
                    ""type"": ""Value"",
                    ""id"": ""b914d6c9-69a3-440f-b250-f666678e9e32"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pointer Tap"",
                    ""type"": ""Button"",
                    ""id"": ""02c674aa-81b1-4fcd-b4d9-a4cb95f249de"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pointer Press"",
                    ""type"": ""Button"",
                    ""id"": ""35e35f04-9064-4193-963b-bc881d35957e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pointer Release"",
                    ""type"": ""Button"",
                    ""id"": ""99449971-7645-4da8-8dcd-008262b3e9e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""100a799b-4df5-4b9c-bc78-9b36293b385c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Pointer Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7649271-e474-44cb-bf2b-72c046126d22"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Pointer Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6589c84-909b-41f0-b892-fb402dc5ba95"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Pointer Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""daefe5eb-465d-49b3-84f3-5b9b020829f5"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Pointer Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67a42b91-8667-4604-845c-d039227881d7"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Pointer Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4db8b9a-84a2-4e52-872a-ebabcbdc624a"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Pointer Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe3c61b0-3182-430c-ac98-de269fb91d93"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Pointer Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef9c286a-58f8-47cf-b31e-5bdb7b5dc88a"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Pointer Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Standard
            m_Standard = asset.FindActionMap("Standard", throwIfNotFound: true);
            m_Standard_PointerPosition = m_Standard.FindAction("Pointer Position", throwIfNotFound: true);
            m_Standard_PointerTap = m_Standard.FindAction("Pointer Tap", throwIfNotFound: true);
            m_Standard_PointerPress = m_Standard.FindAction("Pointer Press", throwIfNotFound: true);
            m_Standard_PointerRelease = m_Standard.FindAction("Pointer Release", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Standard
        private readonly InputActionMap m_Standard;
        private IStandardActions m_StandardActionsCallbackInterface;
        private readonly InputAction m_Standard_PointerPosition;
        private readonly InputAction m_Standard_PointerTap;
        private readonly InputAction m_Standard_PointerPress;
        private readonly InputAction m_Standard_PointerRelease;
        public struct StandardActions
        {
            private @Inputs m_Wrapper;
            public StandardActions(@Inputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @PointerPosition => m_Wrapper.m_Standard_PointerPosition;
            public InputAction @PointerTap => m_Wrapper.m_Standard_PointerTap;
            public InputAction @PointerPress => m_Wrapper.m_Standard_PointerPress;
            public InputAction @PointerRelease => m_Wrapper.m_Standard_PointerRelease;
            public InputActionMap Get() { return m_Wrapper.m_Standard; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(StandardActions set) { return set.Get(); }
            public void SetCallbacks(IStandardActions instance)
            {
                if (m_Wrapper.m_StandardActionsCallbackInterface != null)
                {
                    @PointerPosition.started -= m_Wrapper.m_StandardActionsCallbackInterface.OnPointerPosition;
                    @PointerPosition.performed -= m_Wrapper.m_StandardActionsCallbackInterface.OnPointerPosition;
                    @PointerPosition.canceled -= m_Wrapper.m_StandardActionsCallbackInterface.OnPointerPosition;
                    @PointerTap.started -= m_Wrapper.m_StandardActionsCallbackInterface.OnPointerTap;
                    @PointerTap.performed -= m_Wrapper.m_StandardActionsCallbackInterface.OnPointerTap;
                    @PointerTap.canceled -= m_Wrapper.m_StandardActionsCallbackInterface.OnPointerTap;
                    @PointerPress.started -= m_Wrapper.m_StandardActionsCallbackInterface.OnPointerPress;
                    @PointerPress.performed -= m_Wrapper.m_StandardActionsCallbackInterface.OnPointerPress;
                    @PointerPress.canceled -= m_Wrapper.m_StandardActionsCallbackInterface.OnPointerPress;
                    @PointerRelease.started -= m_Wrapper.m_StandardActionsCallbackInterface.OnPointerRelease;
                    @PointerRelease.performed -= m_Wrapper.m_StandardActionsCallbackInterface.OnPointerRelease;
                    @PointerRelease.canceled -= m_Wrapper.m_StandardActionsCallbackInterface.OnPointerRelease;
                }
                m_Wrapper.m_StandardActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PointerPosition.started += instance.OnPointerPosition;
                    @PointerPosition.performed += instance.OnPointerPosition;
                    @PointerPosition.canceled += instance.OnPointerPosition;
                    @PointerTap.started += instance.OnPointerTap;
                    @PointerTap.performed += instance.OnPointerTap;
                    @PointerTap.canceled += instance.OnPointerTap;
                    @PointerPress.started += instance.OnPointerPress;
                    @PointerPress.performed += instance.OnPointerPress;
                    @PointerPress.canceled += instance.OnPointerPress;
                    @PointerRelease.started += instance.OnPointerRelease;
                    @PointerRelease.performed += instance.OnPointerRelease;
                    @PointerRelease.canceled += instance.OnPointerRelease;
                }
            }
        }
        public StandardActions @Standard => new StandardActions(this);
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        private int m_TouchSchemeIndex = -1;
        public InputControlScheme TouchScheme
        {
            get
            {
                if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
                return asset.controlSchemes[m_TouchSchemeIndex];
            }
        }
        private int m_JoystickSchemeIndex = -1;
        public InputControlScheme JoystickScheme
        {
            get
            {
                if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
                return asset.controlSchemes[m_JoystickSchemeIndex];
            }
        }
        private int m_XRSchemeIndex = -1;
        public InputControlScheme XRScheme
        {
            get
            {
                if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
                return asset.controlSchemes[m_XRSchemeIndex];
            }
        }
        public interface IStandardActions
        {
            void OnPointerPosition(InputAction.CallbackContext context);
            void OnPointerTap(InputAction.CallbackContext context);
            void OnPointerPress(InputAction.CallbackContext context);
            void OnPointerRelease(InputAction.CallbackContext context);
        }
    }
}
